--- app.py ---
from db_connection import create_connection
from user_view import user_menu
from admin_view import admin_menu
from auth_controller import login

def main():
    connection = create_connection()
    
    #user login
    role = login(connection)
    
    if role == 'user':
        user_menu(connection)
    elif role == 'admin':
        admin_menu(connection)

    connection.close()

if __name__ == '__main__':
    main()


--- db_connection.py ---
import mysql.connector

def create_connection():
    DB_CONFIG = {
    'user': 'root',
    'password': '1234',
    'host': '127.0.0.1',
    'database': 'myfirstdb'}
    
    connection = mysql.connector.connect(**DB_CONFIG)
    return connection


--- db_models.py ---
def create_users_table(cursor):
    create_table_query = """
    CREATE TABLE Users (
        user_id INT AUTO_INCREMENT PRIMARY KEY,
        username VARCHAR(50) NOT NULL,
        password VARCHAR(255) NOT NULL,
        role VARCHAR(10) NOT NULL
    )
    """
    cursor.execute(create_table_query)

def create_shoes_table(cursor):
    create_table_query = """
    CREATE TABLE Shoes (
        shoe_id INT AUTO_INCREMENT PRIMARY KEY,
        brand VARCHAR(50) NOT NULL,
        model VARCHAR(50) NOT NULL,
        size DECIMAL(3, 1) NOT NULL,
        price DECIMAL(10, 2) NOT NULL,
        quantity INT NOT NULL
    )
    """
    cursor.execute(create_table_query)

def create_orders_table(cursor):
    create_table_query = """
    CREATE TABLE Orders (
        order_id INT AUTO_INCREMENT PRIMARY KEY,
        user_id INT,
        order_date DATETIME DEFAULT CURRENT_TIMESTAMP,
        total_amount DECIMAL(10, 2) NOT NULL,
        status VARCHAR(20) DEFAULT 'pending',
        FOREIGN KEY (user_id) REFERENCES Users(user_id)
    )
    """
    cursor.execute(create_table_query)

def create_order_items_table(cursor):
    create_table_query = """
    CREATE TABLE OrderItems (
        order_item_id INT AUTO_INCREMENT PRIMARY KEY,
        order_id INT,
        shoe_id INT,
        quantity INT NOT NULL,
        price DECIMAL(10, 2) NOT NULL,
        FOREIGN KEY (order_id) REFERENCES Orders(order_id),
        FOREIGN KEY (shoe_id) REFERENCES Shoes(shoe_id)
    )
    """
    cursor.execute(create_table_query)


--- db_operations.py ---
def add_user(connection, username, password, role):
    cursor = connection.cursor()
    add_user_query = "INSERT INTO Users (username, password, role) VALUES (%s, %s, %s)"
    cursor.execute(add_user_query, (username, password, role))
    connection.commit()
    cursor.close()


--- auth_controller.py ---
def login(connection):
    #Dummy implementation for demo
    username = input("Username: ")
    password = input("Password: ")
    
    cursor = connection.cursor()
    query = "SELECT role FROM Users WHERE username=%s AND password=%s"
    cursor.execute(query, (username, password))
    result = cursor.fetchone()
    cursor.close()
    
    if result:
        return result[0]
    else:
        print("Invalid credentials")
        return None


--- user_view.py ---
def user_menu(connection):
    while True:
        print("1. View Shoes")
        print("2. Purchase Shoes")
        print("3. View Order History")
        print("4. Logout")
        choice = input("Enter choice: ")
        
        if choice == '4':
            break
        # Add more functionality as needed


--- admin_view.py ---
def admin_menu(connection):
    while True:
        print("1. Manage Inventory")
        print("2. Manage Users")
        print("3. View All Orders")
        print("4. Logout")
        choice = input("Enter choice: ")
        
        if choice == '4':
            break
     

--- logger.py ---
import logging

def setup_logging():
    logging.basicConfig(filename='app.log', level=logging.INFO, 
                        format='%(asctime)s:%(levelname)s:%(message)s')


